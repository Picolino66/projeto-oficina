{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao Relat\u00f3rio T\u00e9cnico sobre Angular e Node.js","text":"<p>Este site foi criado para fornecer uma documenta\u00e7\u00e3o completa sobre as tecnologias Angular e Node.js, destacando suas caracter\u00edsticas principais, como configur\u00e1-las e utiliz\u00e1-las no desenvolvimento de aplica\u00e7\u00f5es web modernas.</p>"},{"location":"#o-que-voce-encontrara-aqui","title":"O que voc\u00ea encontrar\u00e1 aqui","text":"<p>Este relat\u00f3rio est\u00e1 dividido em v\u00e1rias se\u00e7\u00f5es, cada uma abordando um aspecto importante das tecnologias Angular e Node.js:</p> <ul> <li>Vis\u00e3o Geral: Uma introdu\u00e7\u00e3o \u00e0s tecnologias, destacando o que s\u00e3o e como podem ser utilizadas.</li> <li>Configura\u00e7\u00e3o do Ambiente: Instru\u00e7\u00f5es passo a passo para configurar seu ambiente de desenvolvimento para trabalhar com Angular e Node.js.</li> <li>Angular:</li> <li>Componentes: Como criar e utilizar componentes no Angular.</li> <li>Diretivas: Como utilizar diretivas para manipular o DOM.</li> <li>Servi\u00e7os e Inje\u00e7\u00e3o de Depend\u00eancia: Como servi\u00e7os funcionam no Angular e como a inje\u00e7\u00e3o de depend\u00eancias \u00e9 utilizada.</li> <li>Node.js:</li> <li>Introdu\u00e7\u00e3o ao Node.js: Uma vis\u00e3o geral do Node.js, incluindo suas principais caracter\u00edsticas.</li> <li>Gerenciamento de Pacotes (npm): Como utilizar o npm para gerenciar depend\u00eancias em projetos Node.js.</li> <li>Express.js: Como usar o Express para criar servidores e APIs.</li> <li>Comunica\u00e7\u00e3o com Banco de Dados: Como integrar o Prisma e MySQL para gerenciar dados no backend.</li> </ul>"},{"location":"#sobre-este-projeto","title":"Sobre este Projeto","text":"<p>Este site foi desenvolvido usando a biblioteca MkDocs do Python, que facilita a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de documenta\u00e7\u00f5es t\u00e9cnicas como esta. Todo o conte\u00fado est\u00e1 dispon\u00edvel publicamente no GitHub para colabora\u00e7\u00e3o e melhorias.</p> <p>Isa\u00edas Gon\u00e7alves Ribeiro - 201810940 Gabriel Camargos Alves - 201720471</p>"},{"location":"angular/componentes/","title":"Componentes no Angular 16","text":"<p>Os componentes s\u00e3o os blocos de constru\u00e7\u00e3o fundamentais de uma aplica\u00e7\u00e3o Angular. Cada componente \u00e9 uma combina\u00e7\u00e3o de:</p> <ul> <li>Classe: Implementa a l\u00f3gica do componente.</li> <li>Template: Define a estrutura HTML que o componente renderiza.</li> <li>Styles: Aplica o CSS espec\u00edfico ao componente.</li> <li>Metadados: Atrav\u00e9s do decorador <code>@Component</code>, que vincula a classe ao seu template e estilo.</li> </ul>"},{"location":"angular/componentes/#criando-um-componente","title":"Criando um Componente","text":"<p>Para criar um novo componente, voc\u00ea pode usar o Angular CLI:</p> <pre><code>ng generate component nome-do-componente\n</code></pre> <p>Isso cria os seguintes arquivos:</p> <ul> <li><code>nome-do-componente.component.ts</code>: Cont\u00e9m a classe do componente.</li> <li><code>nome-do-componente.component.html</code>: Cont\u00e9m o template.</li> <li><code>nome-do-componente.component.css</code>: Cont\u00e9m os estilos espec\u00edficos.</li> <li><code>nome-do-componente.component.spec.ts</code>: Cont\u00e9m os testes unit\u00e1rios para o componente.</li> </ul>"},{"location":"angular/componentes/#decorador-component","title":"Decorador @Component","text":"<p>O decorador @Component \u00e9 utilizado para definir os metadados do componente. Exemplo:</p> <pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-nome-do-componente',\n  templateUrl: './nome-do-componente.component.html',\n  styleUrls: ['./nome-do-componente.component.css']\n})\nexport class NomeDoComponenteComponent {\n  titulo = 'Meu Componente Angular';\n}\n</code></pre>"},{"location":"angular/componentes/#ciclo-de-vida-dos-componentes","title":"Ciclo de Vida dos Componentes","text":"<p>Angular oferece uma s\u00e9rie de hooks de ciclo de vida que permitem executar c\u00f3digo em momentos espec\u00edficos da vida de um componente:</p> <ul> <li><code>ngOnInit()</code>: Chamado uma vez ap\u00f3s a inicializa\u00e7\u00e3o do componente.</li> <li><code>ngOnChanges()</code>: Chamado quando uma propriedade de entrada (input) \u00e9 alterada.</li> <li><code>ngOnDestroy()</code>: Chamado antes do componente ser destru\u00eddo, \u00fatil para limpar recursos.</li> </ul> <p>Esses hooks ajudam a gerenciar como e quando a l\u00f3gica do componente deve ser executada.</p>"},{"location":"angular/componentes/#comunicacao-entre-componentes","title":"Comunica\u00e7\u00e3o entre Componentes","text":"<p>Componentes podem se comunicar de v\u00e1rias maneiras:</p> <ul> <li>Input/Output: Utilizado para passar dados de um componente pai para um filho (@Input) ou emitir eventos do filho para o pai (@Output).</li> <li>Servi\u00e7os Compartilhados: Utilizando inje\u00e7\u00e3o de depend\u00eancia para compartilhar um servi\u00e7o entre componentes, permitindo a troca de informa\u00e7\u00f5es sem necessidade de relacionamentos diretos.</li> </ul> <p>Angular 16 mant\u00e9m o foco em uma arquitetura modular e escal\u00e1vel, onde componentes desempenham um papel central na cria\u00e7\u00e3o de interfaces de usu\u00e1rio din\u00e2micas e reativas.</p>"},{"location":"angular/conceitos_basicos/","title":"Conceitos B\u00e1sicos do Angular 16","text":"<p>Angular 16 \u00e9 a vers\u00e3o mais recente do popular framework de desenvolvimento de aplica\u00e7\u00f5es web front-end desenvolvido pelo Google. Ele continua a oferecer uma arquitetura baseada em componentes, utilizando TypeScript como linguagem principal, o que garante um c\u00f3digo tipado e mais robusto.</p>"},{"location":"angular/conceitos_basicos/#arquitetura-baseada-em-componentes","title":"Arquitetura Baseada em Componentes","text":"<p>No Angular, tudo \u00e9 constru\u00eddo em torno de componentes. Um componente \u00e9 uma classe que gerencia uma view (interface de usu\u00e1rio) e define a l\u00f3gica de comportamento da interface. Componentes s\u00e3o reutiliz\u00e1veis e encapsulam toda a l\u00f3gica necess\u00e1ria para renderizar uma parte espec\u00edfica da aplica\u00e7\u00e3o.</p>"},{"location":"angular/conceitos_basicos/#modulos","title":"M\u00f3dulos","text":"<p>Um m\u00f3dulo no Angular \u00e9 uma cole\u00e7\u00e3o de componentes, diretivas, pipes e servi\u00e7os que s\u00e3o agrupados para formar uma funcionalidade coesa. O m\u00f3dulo raiz \u00e9 chamado de <code>AppModule</code>, e outros m\u00f3dulos podem ser criados para dividir a aplica\u00e7\u00e3o em partes menores e mais gerenci\u00e1veis.</p>"},{"location":"angular/conceitos_basicos/#data-binding","title":"Data Binding","text":"<p>O Angular 16 utiliza um sistema de data binding que permite a sincroniza\u00e7\u00e3o entre a interface do usu\u00e1rio e a l\u00f3gica da aplica\u00e7\u00e3o. Os principais tipos de data binding s\u00e3o:</p> <ul> <li>Interpolation: Sintaxe para exibir valores de vari\u00e1veis na view, por exemplo, <code>{{ vari\u00e1vel }}</code>.</li> <li>Property Binding: Permite definir valores das propriedades do DOM a partir da l\u00f3gica da aplica\u00e7\u00e3o, por exemplo, <code>[src]=\"imagemUrl\"</code>.</li> <li>Event Binding: Conecta eventos do DOM a m\u00e9todos do componente, por exemplo, <code>(click)=\"onClick()\"</code>.</li> <li>Two-way Data Binding: Sincroniza os dados entre o modelo e a view, utilizando a sintaxe <code>[(ngModel)]</code>.</li> </ul>"},{"location":"angular/conceitos_basicos/#diretivas","title":"Diretivas","text":"<p>Diretivas s\u00e3o instru\u00e7\u00f5es no template que alteram a apar\u00eancia ou o comportamento de um elemento no DOM. Elas podem ser estruturais, como <code>*ngIf</code> e <code>*ngFor</code>, ou atributivas, como <code>[ngClass]</code> e <code>[ngStyle]</code>.</p>"},{"location":"angular/conceitos_basicos/#servicos-e-injecao-de-dependencia","title":"Servi\u00e7os e Inje\u00e7\u00e3o de Depend\u00eancia","text":"<p>Servi\u00e7os s\u00e3o classes que encapsulam a l\u00f3gica de neg\u00f3cios ou de acesso a dados que n\u00e3o est\u00e1 diretamente relacionada ao gerenciamento de uma view. O Angular utiliza inje\u00e7\u00e3o de depend\u00eancia (DI) para fornecer inst\u00e2ncias de servi\u00e7os aos componentes ou a outros servi\u00e7os.</p> <p>Angular 16 continua a evoluir para oferecer uma melhor performance, com otimiza\u00e7\u00f5es significativas, novas funcionalidades e suporte estendido a padr\u00f5es modernos de desenvolvimento.</p>"},{"location":"angular/diretivas/","title":"Diretivas no Angular 16","text":"<p>Diretivas no Angular s\u00e3o instru\u00e7\u00f5es que voc\u00ea coloca em seus templates para manipular elementos do DOM, seja para alterar o layout, aplicar classes, ou reagir a eventos.</p>"},{"location":"angular/diretivas/#tipos-de-diretivas","title":"Tipos de Diretivas","text":"<p>Angular 16 oferece tr\u00eas tipos principais de diretivas:</p>"},{"location":"angular/diretivas/#1-diretivas-atributivas","title":"1. Diretivas Atributivas","text":"<p>As diretivas atributivas alteram a apar\u00eancia ou comportamento de um elemento existente no DOM, adicionando, removendo ou modificando seus atributos.</p> <p>Exemplos: - <code>[ngClass]</code>: Aplica ou remove classes CSS dinamicamente. - <code>[ngStyle]</code>: Aplica estilos inline com base em uma express\u00e3o.</p> <p>Exemplo de uso:</p> <pre><code>&lt;div [ngClass]=\"{'classe-ativa': isAtivo}\"&gt;Texto&lt;/div&gt;\n</code></pre>"},{"location":"angular/diretivas/#2-diretivas-estruturais","title":"2. Diretivas Estruturais","text":"<p>As diretivas estruturais alteram a estrutura do DOM, adicionando ou removendo elementos. S\u00e3o precedidas por um asterisco (*).</p> <p>Exemplos:</p> <ul> <li><code>ngIf</code>: Condicionalmente adiciona ou remove um elemento do DOM.</li> <li><code>ngFor</code>: Itera sobre uma cole\u00e7\u00e3o, criando um elemento para cada item.</li> <li><code>ngSwitch</code>: Renderiza um de v\u00e1rios elementos poss\u00edveis com base em uma express\u00e3o.</li> </ul> <p>Exemplo de uso:</p> <pre><code>&lt;div *ngIf=\"isVisivel\"&gt;Este texto \u00e9 vis\u00edvel&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li *ngFor=\"let item of itens\"&gt;{{ item }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"angular/diretivas/#3-diretivas-personalizadas","title":"3. Diretivas Personalizadas","text":"<p>Voc\u00ea pode criar suas pr\u00f3prias diretivas para encapsular l\u00f3gica de manipula\u00e7\u00e3o do DOM que seja reutiliz\u00e1vel em sua aplica\u00e7\u00e3o.</p> <p>Exemplo b\u00e1sico de uma diretiva personalizada que altera a cor do texto:</p> <pre><code>import { Directive, ElementRef, Renderer2, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appAlteraCor]'\n})\nexport class AlteraCorDirective {\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.renderer.setStyle(this.el.nativeElement, 'color', 'blue');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.renderer.setStyle(this.el.nativeElement, 'color', 'black');\n  }\n}\n</code></pre> <p>No template, a diretiva pode ser usada como um atributo:</p> <pre><code>&lt;p appAlteraCor&gt;Passe o mouse sobre este texto para mudar sua cor.&lt;/p&gt;\n</code></pre> <p>Diretivas s\u00e3o fundamentais para a cria\u00e7\u00e3o de interfaces din\u00e2micas e reutiliz\u00e1veis no Angular, e permitem uma grande flexibilidade na manipula\u00e7\u00e3o do DOM de forma declarativa.</p>"},{"location":"angular/servicos_injecao_dependencia/","title":"Servi\u00e7os e Inje\u00e7\u00e3o de Depend\u00eancia no Angular 16","text":"<p>No Angular 16, servi\u00e7os s\u00e3o usados para encapsular l\u00f3gica de neg\u00f3cios ou acesso a dados que pode ser compartilhada entre diferentes componentes. Eles s\u00e3o geralmente classes que realizam tarefas espec\u00edficas e s\u00e3o injetados nos componentes ou outros servi\u00e7os atrav\u00e9s do mecanismo de Inje\u00e7\u00e3o de Depend\u00eancia (DI) do Angular.</p>"},{"location":"angular/servicos_injecao_dependencia/#criando-um-servico","title":"Criando um Servi\u00e7o","text":"<p>Voc\u00ea pode criar um servi\u00e7o utilizando o Angular CLI:</p> <pre><code>ng generate service nome-do-servico\n</code></pre> <pre><code>Isso criar\u00e1 uma classe de servi\u00e7o com um arquivo .ts como este:\n\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NomeDoServico {\n  constructor() { }\n\n  getDados() {\n    // L\u00f3gica para obter dados\n  }\n}\n</code></pre> <ul> <li>O decorador <code>@Injectable</code> indica que essa classe pode ter depend\u00eancias injetadas.</li> <li>providedIn: <code>root</code> faz com que o servi\u00e7o seja registrado na raiz do aplicativo, tornando-o dispon\u00edvel em toda a aplica\u00e7\u00e3o sem a necessidade de import\u00e1-lo em m\u00f3dulos individuais.</li> </ul>"},{"location":"angular/servicos_injecao_dependencia/#injecao-de-dependencia","title":"Inje\u00e7\u00e3o de Depend\u00eancia","text":"<p>A Inje\u00e7\u00e3o de Depend\u00eancia (DI) \u00e9 um padr\u00e3o de design que permite que objetos recebam suas depend\u00eancias de uma fonte externa, em vez de criarem-nas internamente. No Angular, o DI \u00e9 utilizado para injetar servi\u00e7os em componentes, outros servi\u00e7os ou at\u00e9 mesmo diretivas.</p>"},{"location":"angular/servicos_injecao_dependencia/#exemplo-de-injecao-de-dependencia","title":"Exemplo de Inje\u00e7\u00e3o de Depend\u00eancia","text":"<p>Aqui est\u00e1 como voc\u00ea pode injetar um servi\u00e7o em um componente:</p> <pre><code>import { Component, OnInit } from '@angular/core';\nimport { NomeDoServico } from './nome-do-servico.service';\n\n@Component({\n  selector: 'app-meu-componente',\n  templateUrl: './meu-componente.component.html',\n  styleUrls: ['./meu-componente.component.css']\n})\nexport class MeuComponenteComponent implements OnInit {\n\n  dados: any;\n\n  constructor(private servico: NomeDoServico) { }\n\n  ngOnInit(): void {\n    this.dados = this.servico.getDados();\n  }\n}\n</code></pre> <ul> <li><code>private servico: NomeDoServico</code>: Aqui, o servi\u00e7o \u00e9 injetado atrav\u00e9s do construtor do componente.</li> <li><code>ngOnInit()</code>: O servi\u00e7o \u00e9 utilizado para obter dados quando o componente \u00e9 inicializado.</li> </ul>"},{"location":"angular/servicos_injecao_dependencia/#escopos-de-servicos","title":"Escopos de Servi\u00e7os","text":"<p>Os servi\u00e7os podem ter diferentes escopos:</p> <ul> <li><code>Singleton</code>: Um \u00fanico objeto de servi\u00e7o \u00e9 criado e compartilhado por toda a aplica\u00e7\u00e3o (quando providedIn: 'root' \u00e9 usado).</li> <li><code>M\u00f3dulo</code>: O servi\u00e7o \u00e9 escopado ao m\u00f3dulo em que \u00e9 declarado, o que significa que diferentes inst\u00e2ncias podem existir se o m\u00f3dulo for carregado v\u00e1rias vezes.</li> <li><code>Componente</code>: O servi\u00e7o \u00e9 escopado ao componente espec\u00edfico e seus filhos (menos comum, mas poss\u00edvel).</li> </ul>"},{"location":"angular/servicos_injecao_dependencia/#injecao-hierarquica","title":"Inje\u00e7\u00e3o Hier\u00e1rquica","text":"<p>O Angular 16 utiliza uma inje\u00e7\u00e3o de depend\u00eancia hier\u00e1rquica, o que significa que o escopo dos servi\u00e7os pode ser controlado com base na hierarquia dos componentes e m\u00f3dulos. Isso permite grande flexibilidade no design da aplica\u00e7\u00e3o, especialmente em aplicativos grandes e complexos.</p> <p>Os servi\u00e7os e o sistema de inje\u00e7\u00e3o de depend\u00eancia s\u00e3o parte essencial do Angular, permitindo a cria\u00e7\u00e3o de aplica\u00e7\u00f5es modulares, escal\u00e1veis e f\u00e1ceis de manter.</p>"},{"location":"introducao/configuracao_ambiente/","title":"Configura\u00e7\u00e3o do Ambiente","text":"<p>Antes de come\u00e7ar a desenvolver com Angular e Node.js, \u00e9 necess\u00e1rio configurar o ambiente de desenvolvimento. A seguir est\u00e3o os passos para instalar e configurar as ferramentas necess\u00e1rias.</p>"},{"location":"introducao/configuracao_ambiente/#requisitos","title":"Requisitos","text":"<ul> <li>Node.js: Ambiente de execu\u00e7\u00e3o para JavaScript.</li> <li>npm: Gerenciador de pacotes para Node.js, que \u00e9 instalado junto com o Node.js.</li> <li>Angular CLI: Ferramenta de linha de comando para gerenciar projetos Angular.</li> <li>Editor de C\u00f3digo: Recomenda-se o uso do Visual Studio Code, mas qualquer editor que suporte JavaScript/TypeScript pode ser utilizado.</li> </ul>"},{"location":"introducao/configuracao_ambiente/#instalando-nodejs-e-npm","title":"Instalando Node.js e npm","text":"<ol> <li>Acesse o site oficial do Node.js nodejs.org e baixe o instalador para o seu sistema operacional.</li> <li>Siga as instru\u00e7\u00f5es do instalador para concluir a instala\u00e7\u00e3o. Isso instalar\u00e1 tanto o Node.js quanto o npm.</li> </ol> <p>Para verificar se a instala\u00e7\u00e3o foi bem-sucedida, execute os comandos abaixo no terminal:</p> <pre><code>node -v\nnpm -v\n</code></pre> <p>Esses comandos devem retornar a vers\u00e3o instalada do Node.js e do npm.</p>"},{"location":"introducao/configuracao_ambiente/#instalando-angular-cli","title":"Instalando Angular CLI","text":"<p>A Angular CLI (Command Line Interface) facilita a cria\u00e7\u00e3o e o gerenciamento de projetos Angular. Para instal\u00e1-la, execute o seguinte comando:</p> <pre><code>npm install -g @angular/cli\n</code></pre> <p>Para verificar se a instala\u00e7\u00e3o foi bem-sucedida, execute:</p> <pre><code>ng version\n</code></pre> <p>Isso mostrar\u00e1 a vers\u00e3o instalada do Angular CLI.</p>"},{"location":"introducao/configuracao_ambiente/#criando-um-novo-projeto-angular","title":"Criando um Novo Projeto Angular","text":"<p>Ap\u00f3s instalar o Angular CLI, voc\u00ea pode criar um novo projeto Angular com o comando:</p> <pre><code>ng new nome-do-projeto\n</code></pre> <p>Siga as instru\u00e7\u00f5es no terminal para configurar as op\u00e7\u00f5es iniciais do projeto. Isso criar\u00e1 um diret\u00f3rio com o nome do projeto, contendo a estrutura b\u00e1sica de um projeto Angular.</p>"},{"location":"introducao/configuracao_ambiente/#executando-o-projeto-angular","title":"Executando o Projeto Angular","text":"<p>Navegue at\u00e9 o diret\u00f3rio do projeto e execute o seguinte comando para iniciar o servidor de desenvolvimento:</p> <pre><code>ng serve\n</code></pre> <p>Abra o navegador e acesse http://localhost:4200 para ver o projeto Angular em execu\u00e7\u00e3o.</p>"},{"location":"introducao/configuracao_ambiente/#preparando-o-ambiente-para-nodejs","title":"Preparando o Ambiente para Node.js","text":"<p>Para come\u00e7ar a trabalhar com Node.js, voc\u00ea pode criar um novo diret\u00f3rio para seu projeto e inicializar um novo package.json com o comando:</p> <pre><code>npm init -y\n</code></pre> <p>Isso criar\u00e1 um arquivo package.json b\u00e1sico que gerenciar\u00e1 as depend\u00eancias e scripts do projeto.</p>"},{"location":"introducao/configuracao_ambiente/#configuracao-adicional","title":"Configura\u00e7\u00e3o Adicional","text":"<p>Dependendo das necessidades do seu projeto, voc\u00ea pode precisar instalar outras depend\u00eancias, como o Express para a cria\u00e7\u00e3o de servidores ou o Prisma para a comunica\u00e7\u00e3o com bancos de dados. Essas depend\u00eancias podem ser instaladas usando o npm:</p> <pre><code>npm install express\nnpm install @prisma/client\n</code></pre> <p>Com essas ferramentas configuradas, voc\u00ea estar\u00e1 pronto para come\u00e7ar a desenvolver suas aplica\u00e7\u00f5es com Angular e Node.js.</p>"},{"location":"introducao/visao_geral/","title":"Vis\u00e3o Geral","text":"<p>Este relat\u00f3rio t\u00e9cnico aborda as tecnologias Angular e Node.js, que s\u00e3o amplamente utilizadas para o desenvolvimento de aplica\u00e7\u00f5es web modernas. Ambas as tecnologias permitem a cria\u00e7\u00e3o de aplica\u00e7\u00f5es escal\u00e1veis, robustas e de alta performance.</p>"},{"location":"introducao/visao_geral/#angular","title":"Angular","text":"<p>Angular \u00e9 uma plataforma de desenvolvimento de aplica\u00e7\u00f5es web que permite a cria\u00e7\u00e3o de interfaces din\u00e2micas e responsivas. Desenvolvido e mantido pelo Google, o Angular oferece uma estrutura completa para construir desde pequenas aplica\u00e7\u00f5es at\u00e9 grandes sistemas empresariais. Ele utiliza TypeScript como linguagem principal e segue uma arquitetura baseada em componentes.</p>"},{"location":"introducao/visao_geral/#nodejs","title":"Node.js","text":"<p>Node.js \u00e9 um ambiente de execu\u00e7\u00e3o de JavaScript no lado do servidor, que permite a cria\u00e7\u00e3o de aplica\u00e7\u00f5es altamente escal\u00e1veis e eficientes. Com o Node.js, \u00e9 poss\u00edvel construir desde APIs simples at\u00e9 sistemas complexos, utilizando a mesma linguagem que no frontend, o JavaScript. Ele \u00e9 baseado no motor V8 do Google e usa um modelo de I/O n\u00e3o bloqueante, ideal para opera\u00e7\u00f5es ass\u00edncronas.</p>"},{"location":"introducao/visao_geral/#integracao-angular-e-nodejs","title":"Integra\u00e7\u00e3o Angular e Node.js","text":"<p>A combina\u00e7\u00e3o de Angular no frontend e Node.js no backend \u00e9 uma escolha comum para o desenvolvimento de aplica\u00e7\u00f5es web modernas. O Angular cuida da interface do usu\u00e1rio e das intera\u00e7\u00f5es, enquanto o Node.js gerencia o servidor, a l\u00f3gica de neg\u00f3cios e a comunica\u00e7\u00e3o com o banco de dados.</p> <p>Este relat\u00f3rio abordar\u00e1 os conceitos b\u00e1sicos, a configura\u00e7\u00e3o do ambiente e os principais recursos dessas tecnologias, al\u00e9m de oferecer um guia pr\u00e1tico para come\u00e7ar a desenvolver aplica\u00e7\u00f5es com elas.</p>"},{"location":"nodejs/comunicacao_banco/","title":"Comunica\u00e7\u00e3o com Banco de Dados","text":"<p>Para comunica\u00e7\u00e3o com bancos de dados em uma aplica\u00e7\u00e3o Node.js, voc\u00ea pode usar v\u00e1rios m\u00f3dulos e ORMs. Neste exemplo, abordaremos o uso do Prisma com MySQL.</p>"},{"location":"nodejs/comunicacao_banco/#prisma","title":"Prisma","text":"<p>Prisma \u00e9 um ORM moderno para Node.js e TypeScript que simplifica o acesso a bancos de dados. Ele gera um cliente para interagir com seu banco de dados e oferece uma maneira de definir seu esquema de banco de dados.</p>"},{"location":"nodejs/comunicacao_banco/#instalacao-e-configuracao","title":"Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":""},{"location":"nodejs/comunicacao_banco/#1-instale-o-prisma-e-o-cliente-prisma","title":"1. Instale o Prisma e o cliente Prisma:","text":"<pre><code>npm install @prisma/client\nnpm install prisma --save-dev\n</code></pre>"},{"location":"nodejs/comunicacao_banco/#2-inicialize-o-prisma","title":"2. Inicialize o Prisma:","text":"<pre><code>npx prisma init\n</code></pre> <p>Isso criar\u00e1 um diret\u00f3rio prisma com um arquivo schema.prisma e um arquivo .env para configura\u00e7\u00e3o do banco de dados.</p>"},{"location":"nodejs/comunicacao_banco/#3-configure-o-banco-de-dados","title":"3. Configure o Banco de Dados:","text":"<p>No arquivo .env, configure a URL de conex\u00e3o com o MySQL:</p> <pre><code>DATABASE_URL=\"mysql://usuario:senha@localhost:3306/nome_do_banco\"\n</code></pre>"},{"location":"nodejs/comunicacao_banco/#4-defina-o-esquema","title":"4. Defina o Esquema:","text":"<p>No arquivo schema.prisma, defina seu esquema de banco de dados. Exemplo:</p> <pre><code>datasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Usuario {\n  id    Int    @id @default(autoincrement())\n  nome  String\n  email String @unique\n}\n</code></pre>"},{"location":"nodejs/comunicacao_banco/#5-gere-o-cliente-prisma","title":"5. Gere o Cliente Prisma:","text":"<pre><code>npx prisma generate\n</code></pre>"},{"location":"nodejs/comunicacao_banco/#usando-o-cliente-prisma","title":"Usando o Cliente Prisma","text":"<p>Aqui est\u00e1 um exemplo de como usar o cliente Prisma para interagir com o banco de dados:</p> <pre><code>const { PrismaClient } = require('@prisma/client');\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Criar um novo usu\u00e1rio\n  const novoUsuario = await prisma.usuario.create({\n    data: {\n      nome: 'Jo\u00e3o',\n      email: 'joao@example.com'\n    }\n  });\n  console.log('Novo Usu\u00e1rio:', novoUsuario);\n\n  // Buscar todos os usu\u00e1rios\n  const usuarios = await prisma.usuario.findMany();\n  console.log('Usu\u00e1rios:', usuarios);\n}\n\nmain()\n  .catch(e =&gt; {\n    throw e;\n  })\n  .finally(async () =&gt; {\n    await prisma.$disconnect();\n  });\n</code></pre> <p>O Prisma facilita a intera\u00e7\u00e3o com bancos de dados, oferecendo uma API intuitiva e gerando um cliente altamente tipado para trabalhar com dados.</p>"},{"location":"nodejs/express/","title":"Express.js","text":"<p>Express.js \u00e9 um framework de aplicativo web para Node.js, projetado para simplificar o desenvolvimento de servidores e APIs. Ele fornece uma s\u00e9rie de funcionalidades robustas e flex\u00edveis para criar aplica\u00e7\u00f5es web e APIs.</p>"},{"location":"nodejs/express/#principais-caracteristicas","title":"Principais Caracter\u00edsticas","text":"<ul> <li>Middleware: Express usa uma arquitetura baseada em middleware, onde fun\u00e7\u00f5es podem ser encadeadas para processar requisi\u00e7\u00f5es e respostas.</li> <li>Roteamento: Fornece um sistema de roteamento f\u00e1cil de usar para mapear URLs para fun\u00e7\u00f5es espec\u00edficas.</li> <li>Facilidade de Uso: Simplicidade na cria\u00e7\u00e3o de servidores HTTP e APIs RESTful.</li> </ul>"},{"location":"nodejs/express/#exemplo-basico-de-uso","title":"Exemplo B\u00e1sico de Uso","text":"<p>Instale o Express usando npm:</p> <pre><code>npm install express\n</code></pre> <p>Crie um arquivo <code>index.js</code> com o seguinte c\u00f3digo:</p> <pre><code>const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello World!');\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Servidor rodando em http://localhost:${port}`);\n});\n</code></pre>"},{"location":"nodejs/express/#middleware","title":"Middleware","text":"<p>Os middlewares s\u00e3o fun\u00e7\u00f5es que t\u00eam acesso ao objeto de requisi\u00e7\u00e3o (<code>req</code>), ao objeto de resposta (<code>res</code>) e \u00e0 pr\u00f3xima fun\u00e7\u00e3o middleware no ciclo de solicita\u00e7\u00e3o-resposta. Exemplo de middleware:</p> <pre><code>app.use((req, res, next) =&gt; {\n  console.log('Request received');\n  next();\n});\n</code></pre>"},{"location":"nodejs/express/#roteamento","title":"Roteamento","text":"<p>Define rotas para lidar com diferentes URLs. Exemplo de uma rota POST:</p> <pre><code>app.post('/login', (req, res) =&gt; {\n  // L\u00f3gica de login\n  res.send('Login realizado!');\n});\n</code></pre> <p>Express \u00e9 uma escolha popular para construir aplica\u00e7\u00f5es web e APIs devido \u00e0 sua simplicidade e flexibilidade.</p>"},{"location":"nodejs/introducao/","title":"Introdu\u00e7\u00e3o ao Node.js","text":"<p>Node.js \u00e9 um ambiente de execu\u00e7\u00e3o de JavaScript no lado do servidor, constru\u00eddo sobre o motor V8 do Google Chrome. Ele permite que voc\u00ea execute c\u00f3digo JavaScript fora do navegador, tornando poss\u00edvel criar aplica\u00e7\u00f5es de rede escal\u00e1veis e de alto desempenho.</p>"},{"location":"nodejs/introducao/#principais-caracteristicas","title":"Principais Caracter\u00edsticas","text":"<ul> <li>Ass\u00edncrono e Event-Driven: Node.js utiliza um modelo de I/O n\u00e3o bloqueante, o que significa que as opera\u00e7\u00f5es s\u00e3o realizadas de forma ass\u00edncrona, melhorando a performance de aplica\u00e7\u00f5es que realizam muitas opera\u00e7\u00f5es de I/O.</li> <li>Single Programming Language: Com Node.js, voc\u00ea pode usar JavaScript tanto no lado do cliente quanto no lado do servidor, simplificando o desenvolvimento.</li> <li>NPM: Node.js vem com o NPM (Node Package Manager), um gerenciador de pacotes que facilita a instala\u00e7\u00e3o e o gerenciamento de depend\u00eancias.</li> </ul>"},{"location":"nodejs/introducao/#arquitetura","title":"Arquitetura","text":"<p>Node.js \u00e9 baseado em um loop de eventos que escuta eventos e executa callbacks. Isso permite que ele maneje m\u00faltiplas conex\u00f5es simultaneamente com efici\u00eancia.</p> <p>Node.js \u00e9 ideal para aplica\u00e7\u00f5es que requerem alta escalabilidade, como APIs, servi\u00e7os web e ferramentas de linha de comando.</p>"},{"location":"nodejs/npm/","title":"Gerenciamento de Pacotes (npm)","text":"<p>O npm (Node Package Manager) \u00e9 o gerenciador de pacotes padr\u00e3o para Node.js. Ele facilita a instala\u00e7\u00e3o, atualiza\u00e7\u00e3o e gerenciamento de pacotes e bibliotecas.</p>"},{"location":"nodejs/npm/#comandos-basicos-do-npm","title":"Comandos B\u00e1sicos do NPM","text":"<ul> <li>Instalar Pacotes: </li> </ul> <pre><code>  npm install nome-do-pacote\n</code></pre> <p>Instala o pacote e suas depend\u00eancias.</p> <ul> <li>Instalar Pacotes Globalmente:</li> </ul> <pre><code> npm install -g nome-do-pacote\n</code></pre> <p>Instala o pacote globalmente, dispon\u00edvel para qualquer projeto.</p> <ul> <li>Adicionar Depend\u00eancias ao package.json:</li> </ul> <pre><code>npm install nome-do-pacote --save\n</code></pre> <p>Adiciona a depend\u00eancia ao package.json do projeto.</p> <ul> <li>Atualizar Pacotes:</li> </ul> <pre><code>npm update\n</code></pre> <p>Atualiza os pacotes para a vers\u00e3o mais recente.</p> <ul> <li>Remover Pacotes:</li> </ul> <pre><code>npm uninstall nome-do-pacote\n</code></pre> <p>Remove o pacote do projeto.</p> <ul> <li>Verificar Depend\u00eancias:</li> </ul> <pre><code>npm list\n</code></pre> <p>Lista os pacotes instalados e suas vers\u00f5es.</p>"},{"location":"nodejs/npm/#packagejson","title":"<code>package.json</code>","text":"<p>O <code>package.json</code> \u00e9 um arquivo crucial em projetos Node.js, que cont\u00e9m metadados sobre o projeto, como nome, vers\u00e3o, depend\u00eancias e scripts. Exemplo de um package.json:</p> <pre><code>{\n  \"name\": \"meu-projeto\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Descri\u00e7\u00e3o do projeto\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"echo \\\"Erro: nenhum teste especificado\\\" &amp;&amp; exit 1\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n</code></pre> <p>O <code>package.json</code> tamb\u00e9m pode definir scripts que facilitam tarefas comuns, como iniciar o servidor ou rodar testes.</p>"}]}